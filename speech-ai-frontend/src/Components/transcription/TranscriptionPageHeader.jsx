// src/Components/transcription/TranscriptionPageHeader.jsx - Improved Version
import React from 'react';
import { Link } from 'react-router-dom';
import { ArrowLeft, AlertCircle, Download } from 'lucide-react';
import toast from 'react-hot-toast';

const TranscriptionPageHeader = ({ 
  currentSessionId, 
  results, 
  structures, 
  parameters, 
  hasSession 
}) => {
  
  // Helper function to format time
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${String(secs).padStart(2, '0')}`;
  };

  // Download handler with download prevention for rapid clicks
  const handleDownload = async (format, type = 'full') => {
    if (!currentSessionId || !results) {
      toast.error('No data available to download');
      return;
    }

    // Simple rate limiting - prevent multiple downloads in quick succession
    const lastDownload = window.lastDownloadTime || 0;
    const now = Date.now();
    if (now - lastDownload < 2000) { // 2 second cooldown
      toast.error('Please wait a moment before downloading again');
      return;
    }
    window.lastDownloadTime = now;

    try {
      let content = '';
      let filename = '';
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');

      if (type === 'summary') {
        content = results.summary || results.analysis || 'No summary available';
        filename = `${currentSessionId}_summary_${timestamp}.${format}`;
      } else if (type === 'transcript') {
        if (format === 'json') {
          content = JSON.stringify(results.results, null, 2);
        } else {
          content = results.results?.segments?.map(segment => 
            `[${formatTime(segment.start)} - ${formatTime(segment.end)}] ${segment.speaker}: ${segment.text}`
          ).join('\n\n') || 'No transcript available';
        }
        filename = `${currentSessionId}_transcript_${timestamp}.${format}`;
      } else {
        // Full results
        if (format === 'json') {
          content = JSON.stringify(results, null, 2);
        } else {
          const structuresList = Array.isArray(structures) 
            ? structures.filter(s => s.enabled || typeof s === 'string').map(s => typeof s === 'object' ? s.name : s).join(', ')
            : 'None specified';
          
          const parametersList = Array.isArray(parameters)
            ? Object.entries(parameters).map(([key, value]) => `${key}: ${value}`).join(', ')
            : 'None specified';

          content = `SPEECH ANALYSIS RESULTS
${'='.repeat(50)}

Session: ${currentSessionId}
Generated: ${new Date().toLocaleString()}

STRUCTURES PROCESSED:
${structuresList}

PARAMETERS USED:
${parametersList}

SUMMARY:
${results.summary || results.analysis || 'No summary available'}

${'='.repeat(50)}

TRANSCRIPT:
${results.results?.segments?.map(segment => 
  `[${formatTime(segment.start)} - ${formatTime(segment.end)}] ${segment.speaker}: ${segment.text}`
).join('\n\n') || 'No transcript available'}

${'='.repeat(50)}
Generated by AI Speech Diarization Platform
`;
        }
        filename = `${currentSessionId}_results_${timestamp}.${format}`;
      }

      const blob = new Blob([content], { 
        type: format === 'json' ? 'application/json' : 'text/plain' 
      });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      link.remove();
      URL.revokeObjectURL(url);
      
      toast.success(`Downloaded complete results as ${format.toUpperCase()}`);
      
    } catch (error) {
      console.error('Download error:', error);
      toast.error(`Download failed: ${error.message || 'Unknown error'}`);
    }
  };

  return (
    <div className="mb-6">
      {/* Main Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-4">
          <Link 
            to="/" 
            className="flex items-center space-x-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-500 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>Back</span>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-white">
              Exploration & <span className="text-cyan-400">Interviews</span>
            </h1>
            {currentSessionId ? (
              <p className="text-gray-400">Session: {currentSessionId.slice(0, 8)}...</p>
            ) : (
              <p className="text-gray-400">No active session - showing demo content</p>
            )}
          </div>
        </div>
        
        {/* Simple Download Options - JSON and TXT only */}
        {results && (
          <div className="flex items-center space-x-3">
            <button
              onClick={() => handleDownload('json')}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 rounded-lg transition-colors"
            >
              <Download className="w-4 h-4" />
              <span>JSON</span>
            </button>
            <button
              onClick={() => handleDownload('txt')}
              className="flex items-center space-x-2 px-4 py-2 bg-green-500 text-white hover:bg-green-600 rounded-lg transition-colors"
            >
              <Download className="w-4 h-4" />
              <span>TXT</span>
            </button>
          </div>
        )}
      </div>

      {/* Demo Mode Notice */}
      {!hasSession && (
        <div className="bg-blue-100 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center space-x-2">
            <AlertCircle className="w-5 h-5 text-blue-600" />
            <span className="text-blue-800 font-medium">Demo Mode</span>
          </div>
          <p className="text-blue-700 text-sm mt-1">
            You're viewing sample content. Upload an audio file on the Home page to see real results.
          </p>
        </div>
      )}
    </div>
  );
};

export default TranscriptionPageHeader;