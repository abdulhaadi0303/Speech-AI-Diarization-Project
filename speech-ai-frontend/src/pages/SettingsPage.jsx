// src/pages/SettingsPage.jsx - Settings and Configuration

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Settings, 
  Server, 
  Brain, 
  Wifi, 
  Download,
  Trash2,
  RefreshCw,
  Info,
  AlertCircle,
  CheckCircle
} from 'lucide-react';
import { useBackend } from '../contexts/BackendContext';
import { backendApi } from '../services/api';
import toast from 'react-hot-toast';

const SettingsPage = () => {
  const { backendStatus, checkBackendHealth, activeSessions, removeSession } = useBackend();
  const [backendUrl, setBackendUrl] = useState(import.meta.env.VITE_BACKEND_URL || '');
  const [systemInfo, setSystemInfo] = useState(null);

  useEffect(() => {
    if (backendStatus.info) {
      setSystemInfo(backendStatus.info);
    }
  }, [backendStatus.info]);

  const handleRefreshConnection = async () => {
    toast.loading('Checking connection...', { id: 'refresh' });
    const connected = await checkBackendHealth();
    if (connected) {
      toast.success('Connection successful!', { id: 'refresh' });
    } else {
      toast.error('Connection failed', { id: 'refresh' });
    }
  };

  const handleClearSession = async (sessionId) => {
    try {
      await backendApi.cleanupSession(sessionId);
      removeSession(sessionId);
      toast.success('Session cleared');
    } catch (error) {
      toast.error('Failed to clear session');
    }
  };

  const handleClearAllSessions = async () => {
    const sessionIds = Array.from(activeSessions.keys());
    for (const sessionId of sessionIds) {
      try {
        await backendApi.cleanupSession(sessionId);
        removeSession(sessionId);
      } catch (error) {
        console.error(`Failed to clear session ${sessionId}:`, error);
      }
    }
    toast.success('All sessions cleared');
  };

  const downloadSystemInfo = () => {
    if (!systemInfo) return;

    const info = `Speech AI Platform - System Information
${'='.repeat(50)}

Generated: ${new Date().toLocaleString()}

Backend Status:
- Status: ${backendStatus.connected ? 'Connected' : 'Disconnected'}
- Last Checked: ${backendStatus.lastChecked?.toLocaleString() || 'Never'}
- URL: ${backendUrl}

System Information:
- Tailscale Connected: ${systemInfo.tailscale?.connected || false}
- Tailscale IP: ${systemInfo.tailscale?.ip || 'N/A'}
- Pipeline Available: ${systemInfo.features?.pipeline_available || false}
- Whisper Model: ${systemInfo.features?.whisper_model || 'N/A'}
- Preprocessing: ${systemInfo.features?.preprocessing || false}

LLM Status:
- Status: ${systemInfo.llm?.status || 'Unknown'}
- Current Model: ${systemInfo.llm?.current_model || 'N/A'}
- Model Available: ${systemInfo.llm?.model_available || false}

Active Sessions: ${activeSessions.size}

${'='.repeat(50)}
Generated by Speech AI Platform
`;

    const blob = new Blob([info], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `system_info_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    link.remove();
    URL.revokeObjectURL(url);

    toast.success('System info downloaded');
  };

  return (
    <div className="flex-1 p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-gradient-to-r from-gray-500 to-slate-500 rounded-lg">
            <Settings className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Settings</h1>
            <p className="text-gray-600">Configure and monitor your Speech AI platform</p>
          </div>
        </div>
      </div>

      <div className="space-y-8">
        {/* Connection Settings */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
        >
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <Server className="w-5 h-5 text-blue-500" />
              <h2 className="text-xl font-semibold text-gray-900">Backend Connection</h2>
            </div>
            <button
              onClick={handleRefreshConnection}
              className="flex items-center space-x-2 px-3 py-2 bg-blue-50 text-blue-600 border border-blue-200 rounded-lg hover:bg-blue-100 transition-colors"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Test Connection</span>
            </button>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Backend URL
              </label>
              <input
                type="text"
                value={backendUrl}
                onChange={(e) => setBackendUrl(e.target.value)}
                placeholder="http://192.168.1.100:8888"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <p className="text-sm text-gray-500 mt-1">
                Configure this in your .env file as VITE_BACKEND_URL
              </p>
            </div>

            {/* Connection Status */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className={`p-4 rounded-lg border ${
                backendStatus.connected 
                  ? 'bg-green-50 border-green-200' 
                  : 'bg-red-50 border-red-200'
              }`}>
                <div className="flex items-center space-x-2">
                  {backendStatus.connected ? (
                    <CheckCircle className="w-5 h-5 text-green-500" />
                  ) : (
                    <AlertCircle className="w-5 h-5 text-red-500" />
                  )}
                  <span className={`font-medium ${
                    backendStatus.connected ? 'text-green-900' : 'text-red-900'
                  }`}>
                    Backend {backendStatus.connected ? 'Connected' : 'Disconnected'}
                  </span>
                </div>
                {backendStatus.lastChecked && (
                  <p className={`text-sm mt-1 ${
                    backendStatus.connected ? 'text-green-700' : 'text-red-700'
                  }`}>
                    Last checked: {backendStatus.lastChecked.toLocaleTimeString()}
                  </p>
                )}
              </div>

              <div className={`p-4 rounded-lg border ${
                systemInfo?.llm?.status === 'connected'
                  ? 'bg-green-50 border-green-200'
                  : 'bg-yellow-50 border-yellow-200'
              }`}>
                <div className="flex items-center space-x-2">
                  <Brain className={`w-5 h-5 ${
                    systemInfo?.llm?.status === 'connected' ? 'text-green-500' : 'text-yellow-500'
                  }`} />
                  <span className={`font-medium ${
                    systemInfo?.llm?.status === 'connected' ? 'text-green-900' : 'text-yellow-900'
                  }`}>
                    LLM {systemInfo?.llm?.status === 'connected' ? 'Ready' : 'Offline'}
                  </span>
                </div>
                {systemInfo?.llm?.current_model && (
                  <p className={`text-sm mt-1 ${
                    systemInfo?.llm?.status === 'connected' ? 'text-green-700' : 'text-yellow-700'
                  }`}>
                    Model: {systemInfo.llm.current_model}
                  </p>
                )}
              </div>
            </div>
          </div>
        </motion.div>

        {/* System Information */}
        {systemInfo && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
          >
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <Info className="w-5 h-5 text-green-500" />
                <h2 className="text-xl font-semibold text-gray-900">System Information</h2>
              </div>
              <button
                onClick={downloadSystemInfo}
                className="flex items-center space-x-2 px-3 py-2 bg-green-50 text-green-600 border border-green-200 rounded-lg hover:bg-green-100 transition-colors"
              >
                <Download className="w-4 h-4" />
                <span>Download Info</span>
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-medium text-gray-900 mb-3">Backend Features</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Pipeline:</span>
                    <span className={systemInfo.features?.pipeline_available ? 'text-green-600' : 'text-red-600'}>
                      {systemInfo.features?.pipeline_available ? 'Available' : 'Unavailable'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Whisper Model:</span>
                    <span className="text-gray-900">{systemInfo.features?.whisper_model || 'N/A'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Preprocessing:</span>
                    <span className={systemInfo.features?.preprocessing ? 'text-green-600' : 'text-gray-600'}>
                      {systemInfo.features?.preprocessing ? 'Enabled' : 'Disabled'}
                    </span>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="font-medium text-gray-900 mb-3">Network</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Tailscale:</span>
                    <span className={systemInfo.tailscale?.connected ? 'text-green-600' : 'text-gray-600'}>
                      {systemInfo.tailscale?.connected ? 'Connected' : 'Disconnected'}
                    </span>
                  </div>
                  {systemInfo.tailscale?.ip && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">Tailscale IP:</span>
                      <span className="text-gray-900 font-mono text-xs">{systemInfo.tailscale.ip}</span>
                    </div>
                  )}
                  {systemInfo.tailscale?.url && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">Remote URL:</span>
                      <a 
                        href={systemInfo.tailscale.url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 font-mono text-xs"
                      >
                        {systemInfo.tailscale.url}
                      </a>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </motion.div>
        )}

        {/* Session Management */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
        >
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <Trash2 className="w-5 h-5 text-red-500" />
              <h2 className="text-xl font-semibold text-gray-900">Session Management</h2>
            </div>
            {activeSessions.size > 0 && (
              <button
                onClick={handleClearAllSessions}
                className="flex items-center space-x-2 px-3 py-2 bg-red-50 text-red-600 border border-red-200 rounded-lg hover:bg-red-100 transition-colors"
              >
                <Trash2 className="w-4 h-4" />
                <span>Clear All</span>
              </button>
            )}
          </div>

          {activeSessions.size === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <Trash2 className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>No active sessions</p>
            </div>
          ) : (
            <div className="space-y-3">
              {Array.from(activeSessions.entries()).map(([sessionId, sessionData]) => (
                <div key={sessionId} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-medium text-gray-900">
                      Session {sessionId.slice(0, 8)}...
                    </div>
                    <div className="text-sm text-gray-600">
                      Status: <span className={`font-medium ${
                        sessionData.status === 'completed' ? 'text-green-600' :
                        sessionData.status === 'processing' ? 'text-blue-600' :
                        sessionData.status === 'failed' ? 'text-red-600' : 'text-gray-600'
                      }`}>
                        {sessionData.status}
                      </span>
                    </div>
                  </div>
                  <button
                    onClick={() => handleClearSession(sessionId)}
                    className="px-3 py-1 bg-red-50 text-red-600 border border-red-200 rounded-md hover:bg-red-100 transition-colors text-sm"
                  >
                    Clear
                  </button>
                </div>
              ))}
            </div>
          )}
        </motion.div>

        {/* Help & Support */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200 p-6"
        >
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Help & Support</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
            <div>
              <h3 className="font-medium text-gray-900 mb-2">Common Issues</h3>
              <ul className="space-y-1 text-gray-600">
                <li>• Backend not connecting? Check if server is running</li>
                <li>• LLM offline? Ensure Ollama is started and model is pulled</li>
                <li>• Processing slow? Check system resources</li>
                <li>• Upload fails? Verify file format and size</li>
              </ul>
            </div>
            <div>
              <h3 className="font-medium text-gray-900 mb-2">Quick Commands</h3>
              <div className="space-y-1 text-gray-600">
                <div>Backend: <code className="bg-white px-2 py-1 rounded text-xs">python main.py</code></div>
                <div>Ollama: <code className="bg-white px-2 py-1 rounded text-xs">ollama serve</code></div>
                <div>Model: <code className="bg-white px-2 py-1 rounded text-xs">ollama pull llama3.2:3b</code></div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default SettingsPage;